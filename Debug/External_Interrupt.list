
External_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000434  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005cc  080005d4  000105d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005cc  080005cc  000105d4  2**0
                  CONTENTS
  4 .ARM          00000000  080005cc  080005cc  000105d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005cc  080005d4  000105d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005cc  080005cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005d4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015b2  00000000  00000000  00010604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000590  00000000  00000000  00011bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00012148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00012238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df07  00000000  00000000  000122d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018e4  00000000  00000000  000201d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f891  00000000  00000000  00021abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007134c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d0  00000000  00000000  0007139c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005b4 	.word	0x080005b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080005b4 	.word	0x080005b4

080001d8 <TIM9_Config>:
 */

#include "F4_delay.h"

void TIM9_Config (void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    RCC-> APB2ENR |= (1<<16); // enable clock for TIM9
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <TIM9_Config+0x34>)
 80001de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <TIM9_Config+0x34>)
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e6:	6453      	str	r3, [r2, #68]	; 0x44

    TIM9 -> PSC = 100 - 1;  // PSC
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <TIM9_Config+0x38>)
 80001ea:	2263      	movs	r2, #99	; 0x63
 80001ec:	629a      	str	r2, [r3, #40]	; 0x28
    TIM9 -> ARR = 65536 - 1;    // ARR
 80001ee:	4b08      	ldr	r3, [pc, #32]	; (8000210 <TIM9_Config+0x38>)
 80001f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001f4:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM9->CR1 |= (1<<0);    // Enable Counter
 80001f6:	4b06      	ldr	r3, [pc, #24]	; (8000210 <TIM9_Config+0x38>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a05      	ldr	r2, [pc, #20]	; (8000210 <TIM9_Config+0x38>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6013      	str	r3, [r2, #0]
 //   while (!(TIM9->SR & (1<<0)));
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	40023800 	.word	0x40023800
 8000210:	40014000 	.word	0x40014000

08000214 <Delay_us>:

void Delay_us (uint16_t us)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	80fb      	strh	r3, [r7, #6]
	/************** STEPS TO FOLLOW *****************
	1. RESET the Counter
	2. Wait for the Counter to reach the entered value. As each count will take 1 us,
		 the total waiting time will be the required us delay
	************************************************/
	TIM9 -> CNT = 0;
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <Delay_us+0x2c>)
 8000220:	2200      	movs	r2, #0
 8000222:	625a      	str	r2, [r3, #36]	; 0x24
	while (( TIM9->CNT) < us);
 8000224:	bf00      	nop
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <Delay_us+0x2c>)
 8000228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800022a:	88fb      	ldrh	r3, [r7, #6]
 800022c:	429a      	cmp	r2, r3
 800022e:	d3fa      	bcc.n	8000226 <Delay_us+0x12>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40014000 	.word	0x40014000

08000244 <Delay_ms>:

void Delay_ms (uint16_t ms)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	81fb      	strh	r3, [r7, #14]
 8000252:	e006      	b.n	8000262 <Delay_ms+0x1e>
	{
		Delay_us (1000); // delay of 1 ms
 8000254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000258:	f7ff ffdc 	bl	8000214 <Delay_us>
	for (uint16_t i=0; i<ms; i++)
 800025c:	89fb      	ldrh	r3, [r7, #14]
 800025e:	3301      	adds	r3, #1
 8000260:	81fb      	strh	r3, [r7, #14]
 8000262:	89fa      	ldrh	r2, [r7, #14]
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	429a      	cmp	r2, r3
 8000268:	d3f4      	bcc.n	8000254 <Delay_ms+0x10>
	}
}
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <SysClockConfig>:
#define PLL_M 12
#define PLL_N 96
#define PLL_P 0 // PLLP = 2

void SysClockConfig(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	// 1. ENABLE HSE and wait for the HSE to become Ready
	RCC->CR |= 1<<16;
 8000278:	4b28      	ldr	r3, [pc, #160]	; (800031c <SysClockConfig+0xa8>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a27      	ldr	r2, [pc, #156]	; (800031c <SysClockConfig+0xa8>)
 800027e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000282:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<17)));
 8000284:	bf00      	nop
 8000286:	4b25      	ldr	r3, [pc, #148]	; (800031c <SysClockConfig+0xa8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f9      	beq.n	8000286 <SysClockConfig+0x12>

	// 2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR
	RCC->APB1ENR |= 1<<28;
 8000292:	4b22      	ldr	r3, [pc, #136]	; (800031c <SysClockConfig+0xa8>)
 8000294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000296:	4a21      	ldr	r2, [pc, #132]	; (800031c <SysClockConfig+0xa8>)
 8000298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800029c:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= 3<<14;
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <SysClockConfig+0xac>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a1f      	ldr	r2, [pc, #124]	; (8000320 <SysClockConfig+0xac>)
 80002a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002a8:	6013      	str	r3, [r2, #0]


	// 3. Configure the FLASH PREFETCH and the LATENCY Related Settings
	 FLASH->ACR = (1<<8) | (1<<9)| (1<<10)| (5<<0);
 80002aa:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <SysClockConfig+0xb0>)
 80002ac:	f240 7205 	movw	r2, #1797	; 0x705
 80002b0:	601a      	str	r2, [r3, #0]

	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// AHB PR
	RCC->CFGR &= ~(1<<4);
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <SysClockConfig+0xa8>)
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <SysClockConfig+0xa8>)
 80002b8:	f023 0310 	bic.w	r3, r3, #16
 80002bc:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= (4<<10);
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <SysClockConfig+0xa8>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4a16      	ldr	r2, [pc, #88]	; (800031c <SysClockConfig+0xa8>)
 80002c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c8:	6093      	str	r3, [r2, #8]

	// APB2 PR
	RCC->CFGR &= ~(1<<13);
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <SysClockConfig+0xa8>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a13      	ldr	r2, [pc, #76]	; (800031c <SysClockConfig+0xa8>)
 80002d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002d4:	6093      	str	r3, [r2, #8]

		// 5. Configure the MAIN PLL
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (1<<22);  // (1<<22);
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <SysClockConfig+0xa8>)
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <SysClockConfig+0xb4>)
 80002da:	605a      	str	r2, [r3, #4]

	// 6. Enable the PLL and wait for it to become ready
	RCC->CR |= (1<<24);
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <SysClockConfig+0xa8>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <SysClockConfig+0xa8>)
 80002e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));
 80002e8:	bf00      	nop
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <SysClockConfig+0xa8>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <SysClockConfig+0x76>



	// 7. Select the Clock Source and wait for it to be set
	RCC->CFGR |= RCC_CFGR_SW_PLL;  // RCC->CFGR |= (2<<0);
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <SysClockConfig+0xa8>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <SysClockConfig+0xa8>)
 80002fc:	f043 0302 	orr.w	r3, r3, #2
 8000300:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // while (!(RCC->CFGR & (2<<2)));
 8000302:	bf00      	nop
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <SysClockConfig+0xa8>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f003 030c 	and.w	r3, r3, #12
 800030c:	2b08      	cmp	r3, #8
 800030e:	d1f9      	bne.n	8000304 <SysClockConfig+0x90>


}
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	40023800 	.word	0x40023800
 8000320:	40007000 	.word	0x40007000
 8000324:	40023c00 	.word	0x40023c00
 8000328:	0040180c 	.word	0x0040180c

0800032c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	2b00      	cmp	r3, #0
 800033c:	db0b      	blt.n	8000356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 021f 	and.w	r2, r3, #31
 8000344:	4907      	ldr	r1, [pc, #28]	; (8000364 <__NVIC_EnableIRQ+0x38>)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	095b      	lsrs	r3, r3, #5
 800034c:	2001      	movs	r0, #1
 800034e:	fa00 f202 	lsl.w	r2, r0, r2
 8000352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	e000e100 	.word	0xe000e100

08000368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	db0a      	blt.n	8000392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	b2da      	uxtb	r2, r3
 8000380:	490c      	ldr	r1, [pc, #48]	; (80003b4 <__NVIC_SetPriority+0x4c>)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	0112      	lsls	r2, r2, #4
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	440b      	add	r3, r1
 800038c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000390:	e00a      	b.n	80003a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4908      	ldr	r1, [pc, #32]	; (80003b8 <__NVIC_SetPriority+0x50>)
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	f003 030f 	and.w	r3, r3, #15
 800039e:	3b04      	subs	r3, #4
 80003a0:	0112      	lsls	r2, r2, #4
 80003a2:	b2d2      	uxtb	r2, r2
 80003a4:	440b      	add	r3, r1
 80003a6:	761a      	strb	r2, [r3, #24]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	e000e100 	.word	0xe000e100
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <exti_config>:
 */


#include "exti.h"
void exti_config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    // 1. Enable the SYSCFG/AFIO bit in RCC register

        RCC -> APB2ENR |= (1 << 14);
 80003c0:	4b13      	ldr	r3, [pc, #76]	; (8000410 <exti_config+0x54>)
 80003c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003c4:	4a12      	ldr	r2, [pc, #72]	; (8000410 <exti_config+0x54>)
 80003c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ca:	6453      	str	r3, [r2, #68]	; 0x44
	// 2. Configure the EXTI configuration Register in the SYSCFG/AFIO
        SYSCFG->EXTICR[0] &= ~(0xF << 0);
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <exti_config+0x58>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a10      	ldr	r2, [pc, #64]	; (8000414 <exti_config+0x58>)
 80003d2:	f023 030f 	bic.w	r3, r3, #15
 80003d6:	6093      	str	r3, [r2, #8]

	// 4. Configure the Rising Edge / Falling Edge Trigger

		EXTI->RTSR &= ~(1<<0);  // Disable Rising Edge Trigger for PA1
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <exti_config+0x5c>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <exti_config+0x5c>)
 80003de:	f023 0301 	bic.w	r3, r3, #1
 80003e2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<0);  // Enable Falling Edge Trigger for PA1
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <exti_config+0x5c>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <exti_config+0x5c>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	60d3      	str	r3, [r2, #12]

	// 3. Disable the EXTI Mask using Interrupt Mask Register (IMR)
		EXTI->IMR |= (1<<0);
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <exti_config+0x5c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a08      	ldr	r2, [pc, #32]	; (8000418 <exti_config+0x5c>)
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
	// 5. Set the Interrupt Priority

		NVIC_SetPriority(EXTI0_IRQn , 1);
 80003fc:	2101      	movs	r1, #1
 80003fe:	2006      	movs	r0, #6
 8000400:	f7ff ffb2 	bl	8000368 <__NVIC_SetPriority>

	// 6. Enable the interrupt
		NVIC_EnableIRQ (EXTI0_IRQn);
 8000404:	2006      	movs	r0, #6
 8000406:	f7ff ff91 	bl	800032c <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800
 8000414:	40013800 	.word	0x40013800
 8000418:	40013c00 	.word	0x40013c00

0800041c <GPIO_Config>:

#include "gpio.h"


void GPIO_Config()
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
    // Enable GPIO
      RCC -> AHB1ENR = (1 << 0) | ( 1 << 2);
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <GPIO_Config+0x64>)
 8000422:	2205      	movs	r2, #5
 8000424:	631a      	str	r2, [r3, #48]	; 0x30
    // PC13 output

    GPIOC -> MODER |= ( 1 << 26);
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <GPIO_Config+0x68>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a16      	ldr	r2, [pc, #88]	; (8000484 <GPIO_Config+0x68>)
 800042c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000430:	6013      	str	r3, [r2, #0]
    GPIOC -> OTYPER &= ~(1<<13); // ouput push - pull
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <GPIO_Config+0x68>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4a13      	ldr	r2, [pc, #76]	; (8000484 <GPIO_Config+0x68>)
 8000438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800043c:	6053      	str	r3, [r2, #4]
    GPIOC -> OSPEEDR &= ~(1<<26); // low speed
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <GPIO_Config+0x68>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	4a10      	ldr	r2, [pc, #64]	; (8000484 <GPIO_Config+0x68>)
 8000444:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000448:	6093      	str	r3, [r2, #8]


    GPIOC -> PUPDR |= (1 << 26); //pull up
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <GPIO_Config+0x68>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <GPIO_Config+0x68>)
 8000450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000454:	60d3      	str	r3, [r2, #12]

    // PA0 Input

    GPIOA -> MODER &= ~(3 << 0);
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <GPIO_Config+0x6c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <GPIO_Config+0x6c>)
 800045c:	f023 0303 	bic.w	r3, r3, #3
 8000460:	6013      	str	r3, [r2, #0]
    GPIOA -> MODER |= (0U << 0);
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <GPIO_Config+0x6c>)
 8000464:	4a08      	ldr	r2, [pc, #32]	; (8000488 <GPIO_Config+0x6c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6013      	str	r3, [r2, #0]

    GPIOA -> PUPDR |= (1 << 0); //pull_up
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <GPIO_Config+0x6c>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	4a06      	ldr	r2, [pc, #24]	; (8000488 <GPIO_Config+0x6c>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	60d3      	str	r3, [r2, #12]
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40023800 	.word	0x40023800
 8000484:	40020800 	.word	0x40020800
 8000488:	40020000 	.word	0x40020000

0800048c <EXTI0_IRQHandler>:
#include "exti.h"

//uint8_t count = 0;
volatile uint8_t flag = 0;

void EXTI0_IRQHandler(void) {
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
    // Your code to handle the external interrupt (PA0 falling edge)

    // Clear the pending interrupt flag
    if (EXTI->PR & (1U << 0)) {
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <EXTI0_IRQHandler+0x28>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	2b00      	cmp	r3, #0
 800049a:	d005      	beq.n	80004a8 <EXTI0_IRQHandler+0x1c>
	 	flag = 1;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <EXTI0_IRQHandler+0x2c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]

        EXTI->PR = (1U << 0);  // Clear the interrupt flag for EXTI0 (PA0)
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <EXTI0_IRQHandler+0x28>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	615a      	str	r2, [r3, #20]
    }
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40013c00 	.word	0x40013c00
 80004b8:	2000001c 	.word	0x2000001c

080004bc <main>:
int main(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

SysClockConfig();
 80004c0:	f7ff fed8 	bl	8000274 <SysClockConfig>
GPIO_Config();
 80004c4:	f7ff ffaa 	bl	800041c <GPIO_Config>
TIM9_Config();
 80004c8:	f7ff fe86 	bl	80001d8 <TIM9_Config>
exti_config();
 80004cc:	f7ff ff76 	bl	80003bc <exti_config>

//uint32_t check = 0;

while(1)
{
	if (flag)
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <main+0x54>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d013      	beq.n	8000502 <main+0x46>
	{
	 	GPIOC -> BSRR &= ~(1 << 13);
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <main+0x58>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <main+0x58>)
 80004e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004e4:	6193      	str	r3, [r2, #24]
	 	GPIOC -> BSRR |= (1 << 29);
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0x58>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <main+0x58>)
 80004ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004f0:	6193      	str	r3, [r2, #24]
		Delay_ms(1000);
 80004f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f6:	f7ff fea5 	bl	8000244 <Delay_ms>
		flag = 0;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <main+0x54>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e7e6      	b.n	80004d0 <main+0x14>
	}
	else {
		GPIOC -> BSRR |= (1 << 13);
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <main+0x58>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a03      	ldr	r2, [pc, #12]	; (8000514 <main+0x58>)
 8000508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050c:	6193      	str	r3, [r2, #24]
	if (flag)
 800050e:	e7df      	b.n	80004d0 <main+0x14>
 8000510:	2000001c 	.word	0x2000001c
 8000514:	40020800 	.word	0x40020800

08000518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800051c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000546:	f000 f811 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff ffb7 	bl	80004bc <main>

0800054e <LoopForever>:

LoopForever:
  b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800055c:	080005d4 	.word	0x080005d4
  ldr r2, =_sbss
 8000560:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000564:	20000020 	.word	0x20000020

08000568 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC_IRQHandler>
	...

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	4d0d      	ldr	r5, [pc, #52]	; (80005a4 <__libc_init_array+0x38>)
 8000570:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000572:	1b64      	subs	r4, r4, r5
 8000574:	10a4      	asrs	r4, r4, #2
 8000576:	2600      	movs	r6, #0
 8000578:	42a6      	cmp	r6, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	4d0b      	ldr	r5, [pc, #44]	; (80005ac <__libc_init_array+0x40>)
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <__libc_init_array+0x44>)
 8000580:	f000 f818 	bl	80005b4 <_init>
 8000584:	1b64      	subs	r4, r4, r5
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	2600      	movs	r6, #0
 800058a:	42a6      	cmp	r6, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f855 3b04 	ldr.w	r3, [r5], #4
 8000594:	4798      	blx	r3
 8000596:	3601      	adds	r6, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f855 3b04 	ldr.w	r3, [r5], #4
 800059e:	4798      	blx	r3
 80005a0:	3601      	adds	r6, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005cc 	.word	0x080005cc
 80005a8:	080005cc 	.word	0x080005cc
 80005ac:	080005cc 	.word	0x080005cc
 80005b0:	080005d0 	.word	0x080005d0

080005b4 <_init>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr
